diff -Nur a/xbmc/windowing/gbm/DRMAtomic.cpp c/xbmc/windowing/gbm/DRMAtomic.cpp
--- a/xbmc/windowing/gbm/DRMAtomic.cpp	2018-04-01 00:19:02.000000000 +0200
+++ c/xbmc/windowing/gbm/DRMAtomic.cpp	2018-04-12 23:01:41.369204015 +0200
@@ -156,7 +156,7 @@
   else
     plane = m_primary_plane;
 
-  if (rendered)
+  if (rendered && videoLayer)
   {
     AddPlaneProperty(m_req, plane, "FB_ID", fb_id);
     AddPlaneProperty(m_req, plane, "CRTC_ID", m_crtc->crtc->crtc_id);
@@ -169,12 +169,6 @@
     AddPlaneProperty(m_req, plane, "CRTC_W", m_mode->hdisplay);
     AddPlaneProperty(m_req, plane, "CRTC_H", m_mode->vdisplay);
   }
-  else if (videoLayer && !g_windowManager.HasVisibleControls())
-  {
-    // disable gui plane when video layer is active and gui has no visible controls
-    AddPlaneProperty(m_req, plane, "FB_ID", 0);
-    AddPlaneProperty(m_req, plane, "CRTC_ID", 0);
-  }
 
   auto ret = drmModeAtomicCommit(m_fd, m_req, flags | DRM_MODE_ATOMIC_TEST_ONLY, nullptr);
   if (ret < 0)
@@ -206,7 +200,7 @@
 
   struct drm_fb *drm_fb = nullptr;
 
-  if (rendered)
+  if (rendered && videoLayer)
   {
     drm_fb = CDRMUtils::DrmFbGetFromBo(bo);
     if (!drm_fb)
diff -Nur a/xbmc/windowing/gbm/GBMUtils.cpp c/xbmc/windowing/gbm/GBMUtils.cpp
--- a/xbmc/windowing/gbm/GBMUtils.cpp	2018-04-01 00:19:02.000000000 +0200
+++ c/xbmc/windowing/gbm/GBMUtils.cpp	2018-04-12 23:04:16.422104532 +0200
@@ -69,6 +69,14 @@
                                                                          width,
                                                                          height);
 
+  if (!m_nativeWindow)
+  {
+    fbdev_window *nativeWindow = new fbdev_window;
+    nativeWindow->width = width;
+    nativeWindow->height = height;
+    m_nativeWindow = static_cast<EGLNativeWindowType>(nativeWindow);
+  }
+
   return true;
 }
 
@@ -84,6 +92,12 @@
     gbm_surface_destroy(m_surface);
     m_surface = nullptr;
   }
+
+  if(m_nativeWindow)
+  {
+    delete m_nativeWindow;
+    m_nativeWindow = nullptr;
+  }
 }
 
 struct gbm_bo *CGBMUtils::LockFrontBuffer()
diff -Nur a/xbmc/windowing/gbm/GBMUtils.h c/xbmc/windowing/gbm/GBMUtils.h
--- a/xbmc/windowing/gbm/GBMUtils.h	2018-04-01 00:19:02.000000000 +0200
+++ c/xbmc/windowing/gbm/GBMUtils.h	2018-04-11 23:37:56.129546007 +0200
@@ -22,6 +22,8 @@
 
 #include <gbm.h>
 
+#include <EGL/egl.h>
+
 class CGBMUtils
 {
 public:
@@ -36,6 +38,7 @@
 
   struct gbm_device *m_device = nullptr;
   struct gbm_surface *m_surface = nullptr;
+  EGLNativeWindowType m_nativeWindow = nullptr;
 
 protected:
   struct gbm_bo *m_bo = nullptr;
diff -Nur a/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp c/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp
--- a/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp	2018-04-01 00:19:02.000000000 +0200
+++ c/xbmc/windowing/gbm/WinSystemGbmGLESContext.cpp	2018-04-12 23:05:59.409860046 +0200
@@ -50,7 +50,7 @@
     return false;
   }
 
-  if (!m_pGLContext.CreateDisplay(m_GBM->m_device,
+  if (!m_pGLContext.CreateDisplay(0,
                                   EGL_OPENGL_ES2_BIT,
                                   EGL_OPENGL_ES_API))
   {
@@ -99,7 +99,7 @@
     return false;
   }
 
-  if (!m_pGLContext.CreateSurface(reinterpret_cast<EGLNativeWindowType>(m_GBM->m_surface)))
+  if (!m_pGLContext.CreateSurface(m_GBM->m_nativeWindow))
   {
     return false;
   }
